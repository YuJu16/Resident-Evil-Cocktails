{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julia\\\\Desktop\\\\Info B2 2024_2025\\\\YBOOST\\\\Resident-Evil-Cocktails\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\n\n  // Vérifier si l'utilisateur est déjà authentifié au chargement\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      if (localStorage.getItem('token')) {\n        try {\n          // Configuration des en-têtes avec le token\n          const config = {\n            headers: {\n              'x-auth-token': localStorage.getItem('token')\n            }\n          };\n\n          // Requête pour obtenir les données de l'utilisateur\n          const res = await axios.get('/api/auth', config);\n          setUser(res.data);\n          setIsAuthenticated(true);\n          setLoading(false);\n        } catch (err) {\n          localStorage.removeItem('token');\n          setUser(null);\n          setIsAuthenticated(false);\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Validation du mot de passe\n  const validatePassword = password => {\n    // Au moins 8 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    if (!passwordRegex.test(password)) {\n      return 'Le mot de passe doit contenir au moins 8 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial';\n    }\n    return null;\n  };\n\n  // Fonction pour s'inscrire\n  const register = async formData => {\n    try {\n      // Validation du mot de passe\n      const passwordError = validatePassword(formData.password);\n      if (passwordError) {\n        setError(passwordError);\n        return false;\n      }\n      const res = await axios.post('/api/users', formData);\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      setError(null);\n      setRegistrationSuccess(true);\n      // Simuler l'envoi d'un email de confirmation\n      console.log(`Email de confirmation envoyé à ${formData.email}`);\n      return true;\n    } catch (err) {\n      if (err.response && err.response.status === 400 && err.response.data.msg.includes('existe déjà')) {\n        setError('Cet email ou ce pseudo est déjà utilisé');\n      } else {\n        var _err$response, _err$response$data;\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg) || 'Erreur lors de l\\'inscription');\n      }\n      return false;\n    }\n  };\n\n  // Fonction pour se connecter\n  const login = async formData => {\n    try {\n      const res = await axios.post('/api/auth', formData);\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      setError(null);\n      return true;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.msg) || 'Identifiants invalides');\n      return false;\n    }\n  };\n\n  // Fonction pour se connecter avec Google\n  const loginWithGoogle = async () => {\n    try {\n      // Rediriger vers l'API d'authentification Google\n      window.location.href = '/api/auth/google';\n      return true;\n    } catch (err) {\n      setError('Erreur lors de la connexion avec Google');\n      return false;\n    }\n  };\n\n  // Fonction pour se déconnecter\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      error,\n      registrationSuccess,\n      register,\n      login,\n      loginWithGoogle,\n      logout,\n      validatePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"k6sSvQ7Sk+A5/+E8Qi0YT4yrCDA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","registrationSuccess","setRegistrationSuccess","checkLoggedIn","localStorage","getItem","config","headers","res","get","data","err","removeItem","validatePassword","password","passwordRegex","test","register","formData","passwordError","post","setItem","token","console","log","email","response","status","msg","includes","_err$response","_err$response$data","login","_err$response2","_err$response2$data","loginWithGoogle","window","location","href","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/julia/Desktop/Info B2 2024_2025/YBOOST/Resident-Evil-Cocktails/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\r\n\r\n  // Vérifier si l'utilisateur est déjà authentifié au chargement\r\n  useEffect(() => {\r\n    const checkLoggedIn = async () => {\r\n      if (localStorage.getItem('token')) {\r\n        try {\r\n          // Configuration des en-têtes avec le token\r\n          const config = {\r\n            headers: {\r\n              'x-auth-token': localStorage.getItem('token')\r\n            }\r\n          };\r\n\r\n          // Requête pour obtenir les données de l'utilisateur\r\n          const res = await axios.get('/api/auth', config);\r\n          setUser(res.data);\r\n          setIsAuthenticated(true);\r\n          setLoading(false);\r\n        } catch (err) {\r\n          localStorage.removeItem('token');\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          setLoading(false);\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkLoggedIn();\r\n  }, []);\r\n\r\n  // Validation du mot de passe\r\n  const validatePassword = (password) => {\r\n    // Au moins 8 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n    if (!passwordRegex.test(password)) {\r\n      return 'Le mot de passe doit contenir au moins 8 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial';\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Fonction pour s'inscrire\r\n  const register = async (formData) => {\r\n    try {\r\n      // Validation du mot de passe\r\n      const passwordError = validatePassword(formData.password);\r\n      if (passwordError) {\r\n        setError(passwordError);\r\n        return false;\r\n      }\r\n\r\n      const res = await axios.post('/api/users', formData);\r\n      localStorage.setItem('token', res.data.token);\r\n      setUser(res.data.user);\r\n      setIsAuthenticated(true);\r\n      setError(null);\r\n      setRegistrationSuccess(true);\r\n      // Simuler l'envoi d'un email de confirmation\r\n      console.log(`Email de confirmation envoyé à ${formData.email}`);\r\n      return true;\r\n    } catch (err) {\r\n      if (err.response && err.response.status === 400 && err.response.data.msg.includes('existe déjà')) {\r\n        setError('Cet email ou ce pseudo est déjà utilisé');\r\n      } else {\r\n        setError(err.response?.data?.msg || 'Erreur lors de l\\'inscription');\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Fonction pour se connecter\r\n  const login = async (formData) => {\r\n    try {\r\n      const res = await axios.post('/api/auth', formData);\r\n      localStorage.setItem('token', res.data.token);\r\n      setUser(res.data.user);\r\n      setIsAuthenticated(true);\r\n      setError(null);\r\n      return true;\r\n    } catch (err) {\r\n      setError(err.response?.data?.msg || 'Identifiants invalides');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Fonction pour se connecter avec Google\r\n  const loginWithGoogle = async () => {\r\n    try {\r\n      // Rediriger vers l'API d'authentification Google\r\n      window.location.href = '/api/auth/google';\r\n      return true;\r\n    } catch (err) {\r\n      setError('Erreur lors de la connexion avec Google');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Fonction pour se déconnecter\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        error,\r\n        registrationSuccess,\r\n        register,\r\n        login,\r\n        loginWithGoogle,\r\n        logout,\r\n        validatePassword\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}